# GitLab CI/CD Pipeline Configuration

# Define stages
stages:
  - lint
  - build
  - test
  - security
  - deploy

# Define variables
variables:
  DOCKER_IMAGE_SERVICE_A: $CI_REGISTRY_IMAGE/service_a
  DOCKER_IMAGE_SERVICE_B: $CI_REGISTRY_IMAGE/service_b
  DOCKER_TAG: $CI_COMMIT_SHORT_SHA
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"


# flake8: Style guide enforcement
# black: Code formatting
# pylint: Code analysis
# mypy: Type checking

# Lint stage
lint:
  stage: lint
  image: python:3.9
  script:
    # Install linting tools
    - pip install flake8 black pylint mypy
    # Lint Service A
    - cd service_a
    - flake8 . --max-line-length=120
    - black . --check
    - pylint **/*.py
    - mypy .
    - cd ..
    # Lint Service B
    - cd service_b
    - flake8 . --max-line-length=120
    - black . --check
    - pylint **/*.py
    - mypy .
    - cd ..
  only:
    - main
    - develop
    - merge_requests

# Build stage
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind # service to enable Docker commands within the CI pipeline
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # Build Service A
    - docker build -t $DOCKER_IMAGE_SERVICE_A:$DOCKER_TAG -t $DOCKER_IMAGE_SERVICE_A:latest ./service_a
    - docker push $DOCKER_IMAGE_SERVICE_A:$DOCKER_TAG
    - docker push $DOCKER_IMAGE_SERVICE_A:latest
    
    # Build Service B
    - docker build -t $DOCKER_IMAGE_SERVICE_B:$DOCKER_TAG -t $DOCKER_IMAGE_SERVICE_B:latest ./service_b
    - docker push $DOCKER_IMAGE_SERVICE_B:$DOCKER_TAG
    - docker push $DOCKER_IMAGE_SERVICE_B:latest
  only:
    - main
    - develop
    - merge_requests

# Test stage
test:
  stage: test
  image: python:3.9
  before_script:
    - pip install pytest pytest-cov pytest-xdist pytest-mock
  script:
    # Test Service A
    - cd service_a
    - pytest --cov=./ --cov-report=xml --cov-report=term-missing -n auto
    - cd ..
    
    # Test Service B
    - cd service_b
    - pytest --cov=./ --cov-report=xml --cov-report=term-missing -n auto
    - cd ..
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "**/coverage.xml"
    paths:
      - "**/coverage.xml"
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  only:
    - main
    - develop
    - merge_requests

# Integration Tests
integration_test:
  stage: test
  image: python:3.9
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - pip install pytest requests
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose up -d
    - sleep 10  # Wait for services to start
  script:
    - pytest tests/integration/
  after_script:
    - docker-compose down
  only:
    - main
    - develop
    - merge_requests

# Security scanning stage
security:
  stage: security
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # Scan Service A
    - docker pull $DOCKER_IMAGE_SERVICE_A:$DOCKER_TAG
    - trivy image $DOCKER_IMAGE_SERVICE_A:$DOCKER_TAG
    
    # Scan Service B
    - docker pull $DOCKER_IMAGE_SERVICE_B:$DOCKER_TAG
    - trivy image $DOCKER_IMAGE_SERVICE_B:$DOCKER_TAG
    
    # Dependency scanning
    - pip install safety bandit
    - safety check -r service_a/requirements.txt
    - safety check -r service_b/requirements.txt
    - bandit -r service_a/
    - bandit -r service_b/
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
      sast: gl-sast-report.json
  only:
    - main
    - develop
    - merge_requests

# Deployment stage
deploy:
  stage: deploy
  image: 
    name: hashicorp/terraform:latest
    entrypoint: [""]
  before_script:
    - apk add --no-cache curl
    - curl -L https://github.com/terraform-linters/tflint/releases/latest/download/tflint_linux_amd64.zip -o tflint.zip
    - unzip tflint.zip
    - mv tflint /usr/local/bin/
    - rm tflint.zip
  script:
    # Initialize Terraform
    - cd terraform
    - terraform init
    
    # Validate Terraform configuration
    - terraform validate
    - tflint
    
    # Plan and apply infrastructure changes
    - terraform plan -out=tfplan
    - terraform apply -auto-approve tfplan
    
    # Deploy Docker Compose
    - cd ..
    - docker-compose up -d
  environment:
    name: production
  only:
    - main
  when: manual

# Define cache for pip packages
cache:
  paths:
    - .pip-cache/
    - service_a/__pycache__/
    - service_b/__pycache__/

# Define rules for pipeline execution
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "develop" 